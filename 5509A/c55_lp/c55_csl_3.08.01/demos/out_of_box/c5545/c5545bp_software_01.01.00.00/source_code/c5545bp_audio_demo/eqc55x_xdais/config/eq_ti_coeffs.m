function eq_ti_coeffs(BPCF, BPBWOct, BPGains)
% Calculates the required coefficients for the Texas Instruments
% Graphic EQ used on TI's portable audio player.
%
% Usage:
% eq_ti_coeffs(BPCF, BPBWOct, BPGains)
%  BPCF - an Nx1 vector of band center freqnecies, in Hz.
%  BPBWOct - an Nx1 vector of bandwidths, in octaves.
%  BPGains - an Nx1 vector of input gains, in dB (-15dB to 15dB).
%
% Coefficents for N bands are produced,
%  where N is the length of the BPCF parameter vector.
% Each band is implemented as a 2nd order IIR filter.
% The sample rate is fixed at 44100 Hz.
%
% The output is written to three files:
%  eqcoeffs.s54 -- a TMS320C54x assembly source file of coefficients
%  eqcoeffs.txt -- 
%  eqbetas.txt  -- 

% $Id: eq_ti_coeffs.m,v 1.1.2.1 2000/11/14 19:59:11 rowlands Exp $

Fs=8000;               % Sampling frequency
plot=0;                 % make this a 1 if you want to view the plots
printCoeffs=1;          % make this a one to output coeffs to text file
QNum=30;                % Q Number of Coefficients
QMod=2^32;

% Filter Bank Parameter Initialization

order=2;
N=length(BPCF);

% Calculate 3dB corner frequencies for filters

BP3dBLower=BPCF.*2.^-(BPBWOct/2);
BP3dBUpper=BPCF.*2.^(BPBWOct/2);
BPBW=BP3dBUpper-BP3dBLower;

% Normalize Center Frequencies and Bandwidths with Sampling Rate

CFNorm=2*pi*BPCF/Fs;
BWNorm=2*pi*BPBW/Fs;

% Normalize bandpass gains

BPGainsNorm=10.^(BPGains/20);

% Boost/Cut Filter Coefficient Calcultions (Direct Form 1 Embedded Allpass)

BCGammas=-cos(CFNorm);
BCBetas=(1-tan(BWNorm/2))./(1+tan(BWNorm/2));
BCKs=BPGainsNorm;
BetaGammas=BCGammas.*(1+BCBetas);

if plot
   BCBs=[0.5*((1+BCKs)+((1-BCKs).*BCBetas)); BCGammas.*(1+BCBetas); 0.5*((1-BCKs)+((1+BCKs).*BCBetas))];
   BCAs=[ones(1,N); BCGammas.*(1+BCBetas); BCBetas];
end

dBSteps=1;
MaxdB=15;

for i=1:N
   if plot
      figure(i);
      hold off;
   end

   n=1;
   gamma=-cos(CFNorm(i));
   beta=(1-tan(BWNorm(i)/2))/(1+tan(BWNorm(i)/2));
   for j=1:dBSteps:(2*MaxdB+1)
      gain=(-(MaxdB+1)+j);
      gainnorm=10.^(gain/20);
      if gainnorm<1         
         beta=(gainnorm-tan(BWNorm(i)/2))/(gainnorm+tan(BWNorm(i)/2));
         lowbetas(i, n)=beta;
         n=n+1;
      end
      newbeta=beta;
      
      if plot
         k=gainnorm;
         BCBs=[0.5*((1+k)+((1-k)*newbeta)); gamma*(1+newbeta); 0.5*((1-k)+((1+k)*newbeta))];
         BCAs=[1; gamma*(1+newbeta); newbeta];
      
         Zeros=roots(BCBs);
         Poles=roots(BCAs);

         [BCh,BCw]=freqz(BCBs, BCAs, 65536, Fs);
         magBC=abs(BCh);
         phaseBC=angle(BCh);
         x=20*log10(magBC);
         semilogx(BCw, x);
	 hold on;
      end
   end
   
   if plot
      grid;
      title('Poles and Zeros for varying gains');
      title('Multiple gain response of Bank');
      xlabel('Frequency (Hz)');
      ylabel('Gain (dB)');
   end 
end

BigBetas=BCBetas*2^QNum;
BigBGammas=BetaGammas*2^QNum;

% calculate Q30 values
bdelta=(BCBetas-lowbetas(:,1)')./(MaxdB);
bigbdelta=bdelta.*2.^QNum;
bgdelta=bdelta.*BCGammas;
bigbgdelta=bgdelta.*2.^QNum;

if printCoeffs
   fid = fopen('eqbetas.txt','w');

   for (i=1:N)
      fprintf(fid, 'Band %d\n\n', i); 
      for (j=1:MaxdB)
         fprintf(fid,'Lo Beta Band %d %1.20f\n', i, lowbetas(i,j));
      end
   end
   fclose(fid);

   fid = fopen('eqcoeffs.txt','w');
   for (i=1:N)
      fprintf(fid, 'Beta Band %d 				%1.20f\n\n', i, BCBetas(i));
   
      fprintf(fid, 'LowBeta -15dB 				%1.20f\n', lowbetas(i,1));
      fprintf(fid, 'LowBeta 0 dB 				%1.20f\n\n',BCBetas(i));
  
      fprintf(fid, 'BGamma Band %d 				%1.20f\n',i, BetaGammas(i));
      fprintf(fid, 'Beta Delta Band %d			%1.20f\n', i, bdelta(i));
      fprintf(fid, 'BetaGamma Delta Band %d 			%1.20f\n', i, bgdelta(i));
      fprintf(fid, 'Q%d Int Value Beta Band %d		%1.20f\n',QNum, i, BigBetas(i));
      fprintf(fid, 'Q%d Int Value BGamma Band %d		%1.20f\n',QNum, i, BigBGammas(i));
      fprintf(fid, 'Q%d Int Value Beta Delta Band %d		%1.20f\n',QNum, i, bigbdelta(i));
      fprintf(fid, 'Q%d Int Value BetaGamma Delta Band %d 	%1.20f\n\n\n',QNum, i, bigbgdelta(i));
   end   
   fclose(fid);
end % printCoeffs

fid = fopen('eqcoeffs.s54','w');
fprintf(fid, '* generated by eq_ti_coeffs.m on %s\n', date);
fprintf(fid, '* N=%d\n', N);
fprintf(fid, '* BPCF=');
fprintf(fid, '%d ', BPCF);
fprintf(fid, '\n');
fprintf(fid, '* BPBWOct=');
fprintf(fid, '%.2f ', BPBWOct);
fprintf(fid, '\n');
fprintf(fid, '* BPGains=');
fprintf(fid, '%d ', BPGains);
fprintf(fid, '\n');
fprintf(fid, '\n');
fprintf(fid, '	.def	_EQ_TI_CustomCoeffs\n');
fprintf(fid, '	.def	_EQ_TI_CustomDeltaCoeffs\n');
fprintf(fid, '\n');
fprintf(fid, '	.sect	".const"\n');
fprintf(fid, '\n');
fprintf(fid, '_EQ_TI_CustomCoeffs:\n');
for (i=1:N)
   fprintf(fid, '	.long	0x%08x\n', mod(round(BigBetas(i)),QMod));
   fprintf(fid, '	.long	0x%08x\n', mod(round(BigBGammas(i)),QMod));
end   
fprintf(fid, '_EQ_TI_CustomDeltaCoeffs:\n');
for (i=1:N)
   fprintf(fid, '	.long	0x%08x\n', mod(round(bigbdelta(i)),QMod));
   fprintf(fid, '	.long	0x%08x\n', mod(round(bigbgdelta(i)),QMod));
end   
fclose(fid);
